version: "3.9"

networks:
  profinaut_net:
    name: profinaut_net

services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: profinaut_cloudflared
    command: tunnel run
    restart: unless-stopped
    networks: [profinaut_net]
    volumes:
      - ./cloudflared/config.yml:/etc/cloudflared/config.yml:ro
      - ./cloudflared/dc0e81d8-932a-4581-9d5e-603e60a6c8bb.json:/etc/cloudflared/credentials.json:ro
      - ./vault/cert/origin_ca_rsa_root.pem:/etc/cloudflared/vault_root_ca.pem:ro

  vault:
    image: hashicorp/vault:1.20.0
    container_name: profinaut_vault
    expose:
      - "8200"
    environment:
      VAULT_ADDR: "https://vault:8200"    # ÂÜÖÈÉ®Áõ¥Êé•TLS„ÅÆÂ†¥Âêà„ÅØË®ºÊòéÊõ∏„ÅÆSAN„Å´ "vault" „ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    cap_add: [ "IPC_LOCK" ]
    networks: [profinaut_net]
    volumes:
      - ./vault/config:/vault/config
      - ./vault/cert:/vault/cert
      - ./storage/vault/data:/vault/data
      - ./vault/log:/vault/log
    command: vault server -config=/vault/config/vault.hcl

  # üîî ÂàùÂõû„Å†„Åë GitHub „Å∏ repository_dispatch „ÇíÈÄÅ„Çã Sentinel
  sentinel:
    image: alpine:3.20
    container_name: profinaut_sentinel
    networks: [profinaut_net]
    environment:
      GITHUB_REPO: ${GITHUB_REPO}                            # ‰æã: StudioKeKe/profinaut
      GH_DISPATCH_TOKEN: ${GH_DISPATCH_TOKEN}                # repo „Çπ„Ç≥„Éº„Éó„ÅÆ PAT
      VAULT_ADDR: https://vault.profinaut.studiokeke.com:8200
      CF_ACCESS_CLIENT_ID: ${VAULT_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${VAULT_CF_ACCESS_CLIENT_SECRET}
    volumes:
      - ./vault/cert/origin_ca_rsa_root.pem:/root/origin_ca.pem:ro
      - ./scripts/sentinel/notify_bootstrap.sh:/notify_bootstrap.sh:ro
    depends_on:
      - vault
      - cloudflared
    entrypoint: ["/bin/sh","-c"]
    command: |
      apk add --no-cache curl jq >/dev/null
      chmod +x /notify_bootstrap.sh
      /notify_bootstrap.sh

  # --- ‰ª•Èôç„ÅÆ„Çµ„Éº„Éì„Çπ„ÅØ vault_init ‰æùÂ≠ò„ÇíÂ§ñ„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶ vault „Å´„Å†„Åë‰æùÂ≠ò ---
  mongo:
    image: mongo:6.0
    container_name: profinaut_mongo
    ports: ["27017:27017"]
    networks: [profinaut_net]
    volumes:
      - ./storage/mongo/data:/data/db
    depends_on:
      - vault

  postgres:
    image: postgres:15
    container_name: profinaut_postgres
    environment:
      POSTGRES_USER: profinaut
      POSTGRES_PASSWORD: profinautpass
      POSTGRES_DB: profinaut_db
    ports: ["5432:5432"]
    networks: [profinaut_net]
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
    depends_on:
      - vault

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: profinaut_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [profinaut_net]
    depends_on: [vault]

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: profinaut_kafka
    ports: ["9092:9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks: [profinaut_net]
    volumes:
      - ./storage/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
      - vault

  kafka_init:
    image: bitnami/kafka:latest
    container_name: profinaut_kafka_init
    networks: [profinaut_net]
    entrypoint: ["/bin/bash", "/init_kafka_topics.sh"]
    volumes:
      - ./scripts/init_kafka_topics.sh:/init_kafka_topics.sh:ro
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:latest
    container_name: profinaut_prometheus
    ports: ["9090:9090"]
    environment:
      CF_ACCESS_CLIENT_ID: ${METRICS_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${METRICS_CF_ACCESS_CLIENT_SECRET}
    networks: [profinaut_net]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
    depends_on: [vault]

  grafana:
    image: grafana/grafana:latest
    container_name: profinaut_grafana
    ports: ["3001:3000"]
    networks: [profinaut_net]
    volumes:
      - ./prometheus/grafana_dashboard_template.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    depends_on:
      - prometheus
      - vault

  loki:
    image: grafana/loki:2.9.0
    container_name: profinaut_loki
    ports: ["3100:3100"]
    networks: [profinaut_net]
    volumes:
      - ./prometheus/loki-config.yml:/etc/loki/loki-config.yml:ro
      - ./storage/loki/index:/loki/index
      - ./storage/loki/chunks:/loki/chunks
      - ./storage/loki/boltdb-cache:/loki/boltdb-cache
      - ./storage/loki/rules:/loki/rules
    command: -config.file=/etc/loki/loki-config.yml
    depends_on: [vault]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: profinaut_promtail
    networks: [profinaut_net]
    volumes:
      - /var/log:/var/log
      - ./storage/logs:/app/logs
      - ./vault/log:/vault/logs
      - ./kafka/log:/kafka/logs
      - ./prometheus/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - vault
      - loki

  alertmanager:
    image: prom/alertmanager
    container_name: profinaut_alertmanager
    ports: ["9093:9093"]
    networks: [profinaut_net]
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command: --config.file=/etc/alertmanager/alertmanager.yml
    depends_on: [vault]

  frontend:
    build:
      context: ../frontend
    container_name: profinaut_frontend
    ports: ["3000:3000"]
    environment:
      NODE_ENV: production
    restart: unless-stopped
    networks: [profinaut_net]
    depends_on: [vault]
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  bot_manager:
    build:
      context: ../departments/01_bot_manager
    container_name: profinaut_bot_manager
    environment:
      CF_ACCESS_CLIENT_ID: ${METRICS_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${METRICS_CF_ACCESS_CLIENT_SECRET}
      RUST_LOG: info
      VAULT_ADDR: https://vault:8200
      VAULT_ROLE_ID: ${BOT_MANAGER_ROLE_ID}
      VAULT_SECRET_ID: ${BOT_MANAGER_SECRET_ID}
      SSL_CERT_FILE: /etc/ssl/private/vault_root_ca.pem
      CURL_CA_BUNDLE: /etc/ssl/private/vault_root_ca.pem
    networks: [profinaut_net]
    volumes:
      - ./vault/cert/origin_ca_rsa_root.pem:/etc/ssl/private/vault_root_ca.pem:ro
    depends_on:
      - vault
      - kafka
      - mongo
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  signal_engine:
    build:
      context: ../departments/02_signal_generator
    container_name: profinaut_signal_engine
    environment:
      CF_ACCESS_CLIENT_ID: ${SIGNAL_ENGINE_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${SIGNAL_ENGINE_CF_ACCESS_CLIENT_SECRET}
      VAULT_ADDR: https://vault:8200
      VAULT_ROLE_ID: ${SIGNAL_ENGINE_ROLE_ID}
      VAULT_SECRET_ID: ${SIGNAL_ENGINE_SECRET_ID}
      SSL_CERT_FILE: /etc/ssl/private/vault_root_ca.pem
      CURL_CA_BUNDLE: /etc/ssl/private/vault_root_ca.pem
    networks: [profinaut_net]
    volumes:
      - ./vault/cert/origin_ca_rsa_root.pem:/etc/ssl/private/vault_root_ca.pem:ro
    depends_on:
      - vault
      - kafka
      - mongo
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  trade_executor:
    build:
      context: ../departments/05_trade_executor
    container_name: profinaut_trade_executor
    environment:
      CF_ACCESS_CLIENT_ID: ${TRADE_EXECUTOR_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${TRADE_EXECUTOR_CF_ACCESS_CLIENT_SECRET}
      VAULT_ADDR: https://vault:8200
      VAULT_ROLE_ID: ${TRADE_EXECUTOR_ROLE_ID}
      VAULT_SECRET_ID: ${TRADE_EXECUTOR_SECRET_ID}
      SSL_CERT_FILE: /etc/ssl/private/vault_root_ca.pem
      CURL_CA_BUNDLE: /etc/ssl/private/vault_root_ca.pem
    networks: [profinaut_net]
    volumes:
      - ./vault/cert/origin_ca_rsa_root.pem:/etc/ssl/private/vault_root_ca.pem:ro
    depends_on:
      - vault
      - kafka
      - mongo
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  webhook_server:
    build:
      context: ../departments/99_webhook_server
    container_name: profinaut_webhook_server
    environment:
      DISCORD_WEBHOOK_URL: ${DISCORD_ALERT_WEBHOOK}
    expose: ["8000"]
    networks: [profinaut_net]
    depends_on: [vault]
