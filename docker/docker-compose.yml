version: "3.9"

services:

  vault:
    image: hashicorp/vault:latest
    container_name: profinaut-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "https://vault.profinaut.studiokeke.com:8200"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/config:/vault/config
      - ./vault/cert:/vault/cert
      - ./storage/vault/data:/vault/data
      - ./vault/log:/vault/log
    command: vault server -config=/vault/config/vault.hcl

  vault-init:
    image: python:3.11
    container_name: profinaut-vault-init
    working_dir: /vault/scripts
    entrypoint: [ "bash", "init.sh" ]
    volumes:
      - ./vault:/vault
      - ./docker/.env:/vault/.env  # ← これでも可（ただし scripts からは ../../.env を参照）
    depends_on:
      - vault


  mongo:
    image: mongo:6.0
    container_name: profinaut-mongo
    ports:
      - "27017:27017"
    volumes:
      - ./storage/mongo/data:/data/db
    depends_on:
      - vault-init

  postgres:
    image: postgres:15
    container_name: profinaut-postgres
    environment:
      POSTGRES_USER: profinaut
      POSTGRES_PASSWORD: profinautpass
      POSTGRES_DB: profinaut_db
    ports:
      - "5432:5432"
    volumes:
      - ./storage/postgres/data:/var/lib/postgresql/data
    depends_on:
      - vault-init

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: profinaut-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    depends_on:
      - vault-init

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: profinaut-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./storage/kafka/data:/var/lib/kafka/data
    depends_on: [zookeeper, vault-init]

  prometheus:
    image: prom/prometheus:latest
    container_name: profinaut-prometheus
    ports:
      - "9090:9090"
    environment:
      CF_ACCESS_CLIENT_ID: ${METRICS_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${METRICS_CF_ACCESS_CLIENT_SECRET}
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    depends_on:
      - vault-init

  grafana:
    image: grafana/grafana:latest
    container_name: profinaut-grafana
    ports:
      - "3001:3000"
    volumes:
      - ./prometheus/grafana_dashboard_template.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on: [prometheus, vault-init]

  loki:
    image: grafana/loki:2.9.0
    container_name: profinaut-loki
    ports:
      - "3100:3100"
    volumes:
      - ./prometheus/loki-config.yml:/etc/loki/loki-config.yml:ro
      - ./storage/loki/index:/loki/index
      - ./storage/loki/chunks:/loki/chunks
      - ./storage/loki/boltdb-cache:/loki/boltdb-cache
      - ./storage/loki/rules:/loki/rules
    command: -config.file=/etc/loki/loki-config.yml
    depends_on:
      - vault-init
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: profinaut-promtail
    volumes:
      - /var/log:/var/log
      - ./storage/logs:/app/logs
      - ./vault/log:/vault/logs
      - ./kafka/log:/kafka/logs
      - ./prometheus/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on: [vault-init, loki]

  alertmanager:
    image: prom/alertmanager
    container_name: profinaut-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command: --config.file=/etc/alertmanager/alertmanager.yml
    depends_on:
      - vault-init

  frontend:
    build:
      context: ../frontend
    container_name: profinaut-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    restart: unless-stopped
    depends_on:
      - vault-init
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: profinaut-cloudflared
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      - vault-init

  bot_manager:
    build:
      context: ../departments/01_bot_manager
    container_name: profinaut-bot-manager
    environment:
      CF_ACCESS_CLIENT_ID: ${METRICS_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${METRICS_CF_ACCESS_CLIENT_SECRET}
      RUST_LOG: info
      VAULT_ADDR: ${VAULT_ADDR}
      VAULT_ROLE_ID: ${BOT_MANAGER_ROLE_ID}
      VAULT_SECRET_ID: ${BOT_MANAGER_SECRET_ID}
    depends_on: [vault-init, kafka, mongo]
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  signal_engine:
    build:
      context: ../departments/02_signal_generator
    container_name: profinaut-signal-engine
    environment:
      CF_ACCESS_CLIENT_ID: ${SIGNAL_ENGINE_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${SIGNAL_ENGINE_CF_ACCESS_CLIENT_SECRET}
      VAULT_ADDR: ${VAULT_ADDR}
      VAULT_ROLE_ID: ${SIGNAL_ENGINE_ROLE_ID}
      VAULT_SECRET_ID: ${SIGNAL_ENGINE_SECRET_ID}
    depends_on: [vault-init, kafka, mongo]
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  trade_executor:
    build:
      context: ../departments/05_trade_executor
    container_name: profinaut-trade-executor
    environment:
      CF_ACCESS_CLIENT_ID: ${TRADE_EXECUTOR_CF_ACCESS_CLIENT_ID}
      CF_ACCESS_CLIENT_SECRET: ${TRADE_EXECUTOR_CF_ACCESS_CLIENT_SECRET}
      VAULT_ADDR: ${VAULT_ADDR}
      VAULT_ROLE_ID: ${TRADE_EXECUTOR_ROLE_ID}
      VAULT_SECRET_ID: ${TRADE_EXECUTOR_SECRET_ID}
    depends_on: [vault-init, kafka, mongo]
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  kafka_init:
    image: bitnami/kafka:latest
    container_name: profinaut-kafka-init
    depends_on: [kafka]
    entrypoint: ["/bin/bash", "/init_kafka_topics.sh"]
    volumes:
      - ./scripts/init_kafka_topics.sh:/init_kafka_topics.sh

  webhook_server:
    build:
      context: ../departments/99_webhook_server
    container_name: profinaut-webhook-server
    environment:
      DISCORD_WEBHOOK_URL: ${DISCORD_ALERT_WEBHOOK}
    expose:
      - "5000"
    depends_on:
      - vault-init

  webhook_test:
    image: python:3.11-slim
    volumes:
      - ./departments/99_webhook_server:/app
    entrypoint: ["python", "/app/test_webhook.py"]
    environment:
      VAULT_ADDR: ${VAULT_ADDR}
      WEBHOOK_SERVER_ROLE_ID: ${WEBHOOK_SERVER_ROLE_ID}
      WEBHOOK_SERVER_SECRET_ID: ${WEBHOOK_SERVER_SECRET_ID}
      WEBHOOK_CHANNEL: alerts
    depends_on:
      - vault-init

  webhook_test_sender:
    image: python:3.11-slim
    container_name: profinaut-webhook-test
    depends_on:
      - vault-init
    entrypoint: [ "python", "/app/test_webhook.py" ]
    volumes:
      - ./scripts/webhook_test:/app
    environment:
      VAULT_ADDR: ${VAULT_ADDR}
      VAULT_ROLE_ID: ${PROFINAUT_READONLY_ROLE_ID}
      VAULT_SECRET_ID: ${PROFINAUT_READONLY_SECRET_ID}
      WEBHOOK_CHANNEL: alerts
      TEST_PAYLOAD: |
        {
          "username": "Profinaut Notifier",
          "embeds": [{
            "title": "✅ Webhook Test",
            "description": "送信テストです。チャンネルへ接続しました。この通知がDiscordに届いていれば成功です。",
            "color": 3066993
          }]
        }

  watchtower:
    image: containrrr/watchtower
    container_name: profinaut-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"                        # 古いイメージを自動削除
      WATCHTOWER_POLL_INTERVAL: 300                    # 5分ごとにチェック（秒）
      WATCHTOWER_INCLUDE_RESTARTING: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_LABEL_ENABLE: "true"                  # ラベルで対象コンテナを限定
    depends_on:
      - vault-init

