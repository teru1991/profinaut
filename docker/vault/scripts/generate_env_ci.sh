#!/bin/bash

# =======================================
# 🔐 Profinaut CI用 .env.generated 自動生成スクリプト
# =======================================

set -euo pipefail

# Vault アクセス先とAppRole情報（CI用 Role）
VAULT_ADDR=${VAULT_ADDR:-"https://vault.profinaut.studiokeke.com:8200"}
ROLE_ID="${PROFINAUT_ADMIN_ROLE_ID:-""}"
SECRET_ID="${PROFINAUT_ADMIN_SECRET_ID:-""}"

# 出力先
OUT_FILE="docker/vault/.env.generated"

# チェック
if [[ -z "$ROLE_ID" || -z "$SECRET_ID" ]]; then
  echo "❌ ROLE_ID または SECRET_ID が未設定です。"
  exit 1
fi

echo "🔐 Vault AppRoleログイン中..."
VAULT_TOKEN=$(curl -s --request POST "${VAULT_ADDR}/v1/auth/approle/login" \
  --data "{\"role_id\":\"$ROLE_ID\",\"secret_id\":\"$SECRET_ID\"}" \
  | jq -r .auth.client_token)

if [[ -z "$VAULT_TOKEN" || "$VAULT_TOKEN" == "null" ]]; then
  echo "❌ Vaultログイン失敗。"
  exit 1
fi

echo "✅ ログイン成功。Secrets取得中..."

# Secrets例（必要に応じて拡張）
KEYS=(
  "bot/manager/role_id"
  "bot/manager/secret_id"
  "signal/engine/role_id"
  "signal/engine/secret_id"
  "trade/executor/role_id"
  "trade/executor/secret_id"
  "webhook/role_id"
  "webhook/secret_id"
)

# 出力初期化
echo "# Generated by generate_env_ci.sh" > "$OUT_FILE"

for key in "${KEYS[@]}"; do
  NAME=$(basename "$key" | tr '[:lower:]' '[:upper:]')
  VAULT_PATH="secret/data/$key"

  VALUE=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
    "${VAULT_ADDR}/v1/${VAULT_PATH}" | jq -r '.data.data.value')

  if [[ "$VALUE" == "null" || -z "$VALUE" ]]; then
    echo "⚠️ Warning: $key の取得に失敗しました"
  else
    echo "${NAME}=${VALUE}" >> "$OUT_FILE"
  fi
done

echo "✅ $OUT_FILE を出力しました"
