name: "ðŸ”‘ Vault secrets sync (env/prod)"

on:
  workflow_dispatch:
  repository_dispatch:
    types: [secrets-sync]

permissions:
  contents: read

env:
  VAULT_ADDR: https://vault.profinaut.studiokeke.com:8200
  VAULT_CERT: /tmp/origin_ca.pem
  CF_ACCESS_CLIENT_ID: ${{ secrets.VAULT_CF_ACCESS_CLIENT_ID }}
  CF_ACCESS_CLIENT_SECRET: ${{ secrets.VAULT_CF_ACCESS_CLIENT_SECRET }}
  VAULT_APPROLE_ROLE_ID: ${{ secrets.VAULT_CI_MAINTAINER_ROLE_ID }}
  VAULT_APPROLE_SECRET_ID: ${{ secrets.VAULT_CI_MAINTAINER_SECRET_ID }}

jobs:
  push-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deps
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          echo "${{ secrets.VAULT_ORIGIN_CA_PEM }}" > "$VAULT_CERT"

      - name: Login (AppRole â†’ token)
        id: login
        run: |
          resp=$(curl -sS --fail -X POST \
            --cacert "$VAULT_CERT" \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            -H "Content-Type: application/json" \
            -d "{\"role_id\":\"$VAULT_APPROLE_ROLE_ID\",\"secret_id\":\"$VAULT_APPROLE_SECRET_ID\"}" \
            "$VAULT_ADDR/v1/auth/approle/login")
          echo "$resp" | jq .
          tok=$(echo "$resp" | jq -r '.auth.client_token')
          echo "::add-mask::$tok"
          echo "token=$tok" >> "$GITHUB_OUTPUT"

      - name: Put secrets (kv v2; env/prod/common/*)
        env:
          VAULT_TOKEN: ${{ steps.login.outputs.token }}
        run: |
          put() {
            local path="$1" ; shift
            local data="$1" ; shift
            curl -sS --fail -X PUT \
              --cacert "$VAULT_CERT" \
              -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
              -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
              -H "X-Vault-Token: $VAULT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"data\": $data, \"options\": {\"cas\": 0}}" \
              "$VAULT_ADDR/v1/kv/data/$path" | jq .
          }

          # å…±é€š
          put "env/prod/common/aws"        "$(jq -n \
            --arg id  "${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --arg sec "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --arg reg "ap-northeast-1" \
            '{access_key_id:$id, secret_access_key:$sec, region:$reg}')"

          put "env/prod/common/discord"    "$(jq -n \
            --arg alerts   "${{ secrets.DISCORD_ALERT_WEBHOOK }}" \
            --arg perf     "${{ secrets.DISCORD_PERFORMANCE_WEBHOOK }}" \
            --arg exec     "${{ secrets.DISCORD_TRADE_EXECUTION_WEBHOOK }}" \
            '{alerts_webhook:$alerts, performance_webhook:$perf, trade_execution_webhook:$exec}')"

      - name: Put secrets (kv v2; infra/*)
        env:
          VAULT_TOKEN: ${{ steps.login.outputs.token }}
        run: |
          put() {
            local path="$1" ; shift
            local data="$1" ; shift
            curl -sS --fail -X PUT \
              --cacert "$VAULT_CERT" \
              -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
              -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
              -H "X-Vault-Token: $VAULT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"data\": $data, \"options\": {\"cas\": 0}}" \
              "$VAULT_ADDR/v1/kv/data/$path" | jq .
          }

          put "env/prod/infra/postgres" "$(jq -n \
            --arg u "profinaut" \
            --arg p "${{ secrets.POSTGRES_PASSWORD }}" \
            --arg d "profinaut_db" \
            '{user:$u, password:$p, db:$d}')"

          put "env/prod/infra/mongo"    "$(jq -n \
            --arg u "root" \
            --arg p "${{ secrets.MONGO_ROOT_PASSWORD }}" \
            '{root_user:$u, root_password:$p}')"

      - name: Put secrets (kv v2; app/*)
        env:
          VAULT_TOKEN: ${{ steps.login.outputs.token }}
        run: |
          put() {
            local path="$1" ; shift
            local data="$1" ; shift
            curl -sS --fail -X PUT \
              --cacert "$VAULT_CERT" \
              -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
              -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
              -H "X-Vault-Token: $VAULT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"data\": $data, \"options\": {\"cas\": 0}}" \
              "$VAULT_ADDR/v1/kv/data/$path" | jq .
          }

          put "env/prod/app/bot_manager/cloudflare_access" "$(jq -n \
            --arg id  "${{ secrets.METRICS_CF_ACCESS_CLIENT_ID }}" \
            --arg sec "${{ secrets.METRICS_CF_ACCESS_CLIENT_SECRET }}" \
            '{client_id:$id, client_secret:$sec}')"

          put "env/prod/app/signal_engine/cloudflare_access" "$(jq -n \
            --arg id  "${{ secrets.SIGNAL_ENGINE_CF_ACCESS_CLIENT_ID }}" \
            --arg sec "${{ secrets.SIGNAL_ENGINE_CF_ACCESS_CLIENT_SECRET }}" \
            '{client_id:$id, client_secret:$sec}')"

          put "env/prod/app/trade_executor/cloudflare_access" "$(jq -n \
            --arg id  "${{ secrets.TRADE_EXECUTOR_CF_ACCESS_CLIENT_ID }}" \
            --arg sec "${{ secrets.TRADE_EXECUTOR_CF_ACCESS_CLIENT_SECRET }}" \
            '{client_id:$id, client_secret:$sec}')"

          put "env/prod/app/webhook_server/discord" "$(jq -n \
            --arg alerts "${{ secrets.DISCORD_ALERT_WEBHOOK }}" \
            '{alerts_webhook:$alerts}')"
