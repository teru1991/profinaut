name: "🔐 Vault Bootstrap (on repository_dispatch)"

on:
  repository_dispatch:
    types: [vault-first-boot]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest

    env:
      # ---- Vault / CF Access ----
      VAULT_ADDR: https://vault.profinaut.studiokeke.com:8200
      VAULT_CERT: /tmp/origin_ca.pem
      CF_ACCESS_CLIENT_ID: ${{ secrets.VAULT_CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.VAULT_CF_ACCESS_CLIENT_SECRET }}

      # ---- Paths ----
      POLICY_DIR: docker/vault/policies
      APPROLE_DEFINITIONS: docker/vault/approle_definitions.yaml
      ENV_GENERATED: docker/vault/scripts/env.generated

      # ---- Optional service token ----
      SERVICE_TOKEN_POLICIES: "admin,ci-maintainer"
      SERVICE_TOKEN_TTL: "24h"

      # ---- Optional PGP recipients for init (comma-separated public keys) ----
      BOOTSTRAP_PGP_KEYS: ${{ secrets.BOOTSTRAP_PGP_KEYS }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Deps
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          pip install --disable-pip-version-check -q requests pyyaml
          mkdir -p /tmp
          echo "${{ secrets.VAULT_ORIGIN_CA_PEM }}" > "$VAULT_CERT"

      - name: 🌡️ Health
        id: health
        run: |
          r=$(curl -sS --cacert "$VAULT_CERT" \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            "$VAULT_ADDR/v1/sys/health")
          echo "$r" | jq .
          echo "initialized=$(echo "$r" | jq -r .initialized)" >> "$GITHUB_OUTPUT"

      - name: 🧪 Sanity check (policy / approle defs)
        run: |
          [ -d "$POLICY_DIR" ] || { echo "❌ $POLICY_DIR not found"; exit 1; }
          [ -f "$APPROLE_DEFINITIONS" ] || { echo "❌ $APPROLE_DEFINITIONS not found"; exit 1; }

      - name: 🚀 Init (once)
        if: steps.health.outputs.initialized == 'false'
        id: init
        run: |
          body=$(jq -n '{recovery_shares:5, recovery_threshold:3}')
          if [ -n "${BOOTSTRAP_PGP_KEYS:-}" ]; then
            IFS=',' read -r -a arr <<< "$BOOTSTRAP_PGP_KEYS"
            pgp_json=$(printf '%s\n' "${arr[@]}" | jq -R . | jq -s .)
            body=$(echo "$body" | jq --argjson pgp "$pgp_json" '. + {pgp_keys:$pgp}')
          fi

          resp=$(curl -sS --fail -X PUT \
            --cacert "$VAULT_CERT" \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            -H "Content-Type: application/json" \
            -d "$body" "$VAULT_ADDR/v1/sys/init")

          echo "$resp" | jq 'del(.root_token, .initial_root_token)'
          echo "root_token=$(echo "$resp" | jq -r '.root_token // .initial_root_token')" >> "$GITHUB_OUTPUT"

      - name: 📜 Policies (root token)
        if: steps.health.outputs.initialized == 'false'
        env:
          VAULT_TOKEN: ${{ steps.init.outputs.root_token }}
        run: |
          python3 docker/vault/scripts/create_policies.py

      - name: 🧬 AppRoles (root token) → env.generated
        if: steps.health.outputs.initialized == 'false'
        env:
          VAULT_TOKEN: ${{ steps.init.outputs.root_token }}
        run: |
          python3 docker/vault/scripts/create_approles.py
          test -f "$ENV_GENERATED" || { echo "❌ $ENV_GENERATED not found"; exit 1; }
          echo "✅ Generated $ENV_GENERATED"

      - name: 🔑 (Optional) Issue short-lived service token
        if: steps.health.outputs.initialized == 'false'
        env:
          VAULT_TOKEN: ${{ steps.init.outputs.root_token }}
        run: |
          body=$(jq -n --arg pol "$SERVICE_TOKEN_POLICIES" --arg ttl "$SERVICE_TOKEN_TTL" \
                 '{policies:($pol|split(",")), ttl:$ttl}')
          resp=$(curl -sS --fail -X POST \
            --cacert "$VAULT_CERT" \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$body" "$VAULT_ADDR/v1/auth/token/create")
          tok=$(echo "$resp" | jq -r '.auth.client_token')
          echo "::add-mask::$tok"
          echo "✅ service token issued (masked)"

      - name: 🧹 Revoke root (safety)
        if: steps.health.outputs.initialized == 'false'
        env:
          VAULT_TOKEN: ${{ steps.init.outputs.root_token }}
        run: |
          curl -sS --fail -X POST \
            --cacert "$VAULT_CERT" \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/auth/token/revoke-self" && echo "revoked"

      - name: 📄 Copy master .env → docker/vault/.env
        run: |
          if [ ! -f ".env" ]; then
            echo "❌ repo root に .env がありません"; exit 1
          fi
          mkdir -p docker/vault
          cp -f .env docker/vault/.env
          echo "✅ copied .env → docker/vault/.env"

      - name: 🧩 Create merge_env.sh (inline)
        run: |
          cat > docker/vault/scripts/merge_env.sh <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          SRC_MASTER="${1:?master .env path}"
          DST_FILE="${2:?output .env path}"
          GEN_FILE="${3:?env.generated path}"

          tmp="$(mktemp)"
          cp "$DST_FILE" "$tmp"

          # 1) 既存キーのうち、env.generated に含まれるキーを一旦削除
          #    2) env.generated を追記
          # ※ KEY=VALUE 形式のみ対象（コメント/空行は保持）
          awk -F= '
            FNR==NR && $0 ~ /^[A-Za-z_][A-Za-z0-9_]*=/ { k[$1]=1; next }
            FNR!=NR {
              if ($0 ~ /^[A-Za-z_][A-Za-z0-9_]*=/) {
                split($0, a, "=")
                if (!(a[1] in k)) print $0
              } else {
                print $0
              }
            }
          ' "$GEN_FILE" "$tmp" > "$DST_FILE"

          # 追記（末尾にそのまま追加）
          cat "$GEN_FILE" >> "$DST_FILE"
          rm -f "$tmp"
          EOS
          chmod +x docker/vault/scripts/merge_env.sh

      - name: 🔀 Merge env.generated → docker/vault/.env
        run: |
          if [ ! -f "$ENV_GENERATED" ]; then
            echo "❌ $ENV_GENERATED が見つかりません"; exit 1
          fi
          bash docker/vault/scripts/merge_env.sh \
            .env \
            docker/vault/.env \
            "$ENV_GENERATED"

          # 露出防止のため、先頭数行だけマスク表示
          awk -F= '
            $0 ~ /^[A-Za-z_][A-Za-z0-9_]*=/ {
              v=$2; if(length(v)>6){ printf "%s=%s***MASKED***\n",$1,substr(v,1,6) }
              else { print $1"="v }
              next
            }
            { print }
          ' docker/vault/.env | sed -n "1,20p"

      - name: 📦 Artifact (確認用)
        uses: actions/upload-artifact@v4
        with:
          name: docker-vault-env-masked
          path: docker/vault/.env
