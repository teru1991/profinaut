name: Vault_Tunnel_Diagnostic_Step_by_Step

on:
  workflow_dispatch:

jobs:
  diagnose_vault:
    runs-on: ubuntu-latest

    env:
      VAULT_BASE_URL: https://vault.profinaut.studiokeke.com
      CF_ACCESS_CLIENT_ID: ${{ secrets.VAULT_CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.VAULT_CF_ACCESS_CLIENT_SECRET }}

    steps:
      - name: Step_1_Checkout
        uses: actions/checkout@v4

      - name: Step_2_Install_tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl dnsutils netcat-openbsd openssl

      - name: Step_3_DNS_Resolve
        run: |
          echo "🔍 dig +short vault.profinaut.studiokeke.com"
          dig +short vault.profinaut.studiokeke.com || true

      - name: Step_4_TCP_443_Reachability
        run: |
          echo "🔌 Checking TCP 443..."
          nc -zv vault.profinaut.studiokeke.com 443 || echo "❌ TCP:443 not reachable"

      - name: Step_5_TLS_Server_Hello_and_Cert
        run: |
          echo "🔐 openssl s_client handshake + certs"
          timeout 10 bash -c '
            echo | openssl s_client \
              -connect vault.profinaut.studiokeke.com:443 \
              -servername vault.profinaut.studiokeke.com \
              -showcerts -CApath /etc/ssl/certs -brief
          ' || true

      # 🔄 Optional: IP直指定テスト
      - name: Step_6_1_IP_Force_Resolve_and_Curl
        run: |
          echo "📡 --resolve を使って直接IP指定での接続を試みます（DNSバイパス）"
          IP=$(dig +short vault.profinaut.studiokeke.com | tail -n1)
          echo "Resolved IP: $IP"
          curl -vk \
            --resolve vault.profinaut.studiokeke.com:443:$IP \
            "${VAULT_BASE_URL}/v1/sys/health" || true

      # 🔐 手動CA指定（Vault証明書のRoot CAを使用）
      - name: Step_6_2_Curl_with_Manual_CA
        run: |
          echo "${{ secrets.VAULT_ROOT_CA_PEM }}" > /tmp/vault_root_ca.pem
          curl -vk --cacert /tmp/vault_root_ca.pem \
            "${VAULT_BASE_URL}/v1/sys/health" || true

      - name: Step_6_Health_without_CF_Access_headers
        run: |
          echo "🌐 Request without CF-Access headers (expect 401/403)"
          curl -i -sS "${VAULT_BASE_URL}/v1/sys/health" || true

      - name: Step_7_Health_with_CF_Access_headers
        run: |
          echo "✅ Request with CF-Access headers (expect 200 or Vault-side error)"
          curl -i -sS \
            -H "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            -H "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            "${VAULT_BASE_URL}/v1/sys/health" || true

      - name: Step_8_Verbose_TLS_with_Headers
        run: |
          echo "🔎 TLS verbose with headers"
          curl -vk \
            -H "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            -H "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            "${VAULT_BASE_URL}/v1/sys/health" || true

      - name: Step_8_1_Curl_Trace_Debug
        run: |
          echo "📘 --trace-ascii を使った詳細なTLSレベルの追跡"
          curl --trace-ascii /dev/stdout -s \
            -H "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            -H "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            "${VAULT_BASE_URL}/v1/sys/health" || true

      - name: Step_9_Verify_Cert_Locally
        run: |
          echo "${{ secrets.VAULT_ROOT_CA_PEM }}" > /tmp/vault_root_ca.pem
          echo | openssl s_client -connect vault.profinaut.studiokeke.com:443 \
            -servername vault.profinaut.studiokeke.com \
            -showcerts 2>/dev/null | \
            openssl x509 -outform PEM > /tmp/vault_cert.pem

          echo "🔍 openssl verify"
          openssl verify -CAfile /tmp/vault_root_ca.pem /tmp/vault_cert.pem || true