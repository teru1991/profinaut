name: Vault_Tunnel_Diagnostic_Step_by_Step

on:
  workflow_dispatch:

jobs:
  diagnose_vault:
    runs-on: ubuntu-latest

    env:
      # ✅ 443 でアクセス（:8200 は使わない）
      VAULT_BASE_URL: https://vault.profinaut.studiokeke.com
      CF_ACCESS_CLIENT_ID: ${{ secrets.VAULT_CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.VAULT_CF_ACCESS_CLIENT_SECRET }}

    steps:
      - name: Step_1_Checkout
        uses: actions/checkout@v4

      - name: Step_2_Install_tools
        run: |
          sudo apt-get update
          # netcat はディストリごとに仮想パッケージ名なので openbsd 実装を明示
          sudo apt-get install -y curl dnsutils netcat-openbsd openssl

      - name: Step_3_DNS_Resolve
        run: |
          echo "🔍 dig +short vault.profinaut.studiokeke.com"
          dig +short vault.profinaut.studiokeke.com || true

      - name: Step_4_TCP_443_Reachability
        run: |
          echo "🔌 Checking TCP 443..."
          nc -zv vault.profinaut.studiokeke.com 443 || echo "❌ TCP:443 not reachable"

      - name: Step_5_TLS_Server_Hello_and_Cert
        run: |
          echo "🔐 openssl s_client -connect ...:443 -servername ..."
          # 証明書チェーンとSNI応答を確認（数秒で抜ける）
          timeout 8 bash -c 'echo | openssl s_client -connect vault.profinaut.studiokeke.com:443 -servername vault.profinaut.studiokeke.com -tls1_3 -brief' || true

      # ここから HTTP レイヤ切り分け
      - name: Step_6_Health_without_CF_Access_headers
        run: |
          echo "🌐 Request without CF-Access headers (expect 401/403)"
          set -x
          curl -i -sS "${VAULT_BASE_URL}/v1/sys/health" || true
          set +x

      - name: Step_7_Health_with_CF_Access_headers
        run: |
          echo "✅ Request with CF-Access headers (expect 200 or 429/5xx if Vault 側問題)"
          set -x
          curl -i -sS \
            -H "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            -H "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            "${VAULT_BASE_URL}/v1/sys/health"
          set +x

      # 追加の詳細デバッグ（必要に応じて）
      - name: Step_8_Verbose_TLS_with_Headers
        run: |
          echo "🔎 TLS verbose with headers（失敗時の深掘り用）"
          curl -vk \
            -H "CF-Access-Client-Id: ${CF_ACCESS_CLIENT_ID}" \
            -H "CF-Access-Client-Secret: ${CF_ACCESS_CLIENT_SECRET}" \
            "${VAULT_BASE_URL}/v1/sys/health" || true
